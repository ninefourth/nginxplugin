功能：
这是一个对nginx做的端点模块，用于对外暴露restful，方便外部程序在不重启nginx的情况下干预nginx的行为(通过其它模块，而不是在本模块内做处理，本模块只是提供端点和调用其它功能模块)

做如下配置，使端点对外暴露
server {
        listen 8100;
        server_name 192.168.7.233 127.0.0.1;
        location / {
            endpoint;
            var_conf forgray fortest=/usr/local/conf/test.conf ;
        }
    }

endpoint: 暴露端点
var_conf: 如果使用自定义变量(取值为0/1)则在此指令处理注册，forgray是自定义变量名，含“=”的参数，前部是自定义变量名，后半部是变量对应的配置文件(绝对路径)

目前完成的功能
一.列出所有upstream
http://192.168.7.233:8100/list
    upstream store {
        server 192.168.128.30:8085 name=0 weight=3 region=2 down=0 check_down=0
        server 192.168.128.30:8086 name=1 weight=3 region=2 down=0 check_down=0
        server 192.168.128.30:8087 name=2 weight=3 region=0 down=0 check_down=0
    }
    upstream store1 {
        server 192.168.128.30:8083 name=0 weight=3 region=2 down=0 check_down=0
        server 192.168.128.30:8084 name=1 weight=3 region=1 down=0 check_down=0
    }
返回结果里，
    name:唯一名称，摘挂server使用此值
    weight:表示服务器权重
    region:表示服务器所属分区，配合访问路由可用将指定访问路由到指定分区
    down:表示server的状态，nginx.conf里的down指令或curl down指令都可以设置此值，如果初始状态是down的情况，使用api up指令可以使服务器处于启动状态
    check_down:表示监听到后服务器不可用后将服务器自动摘掉,1为摘掉，0为启用

二. 动态摘挂upstream的server，注意必须在配置文件的upstream中使用 xfdf_ip_hash(ngx_xfdf_ip_hash_module)
#摘掉server /down/{upstream_name}/{server_name}
http://192.168.7.233:8100/down/store1/0
#摘掉server /down/{upstream_name}/{server_name}　有日志记录
http://192.168.7.233:8100/down/store1/0/log

#挂载server /up/{upstream_name}/{server_name}
http://192.168.7.233:8100/up/store1/0

如果要摘挂多个服务器可以用","分隔

三.动态设置服务器负载权重
#设置权重 /weight/{upstream_name}/{server_name}/{权重数值}
http://192.168.27.74:8100/weight/store1/1/2

四.添加自定义变量对应用户规则列表
#注意，必须在endpoint指令后添加自定义变量名，方可正常使用：
如：
    location / {
        endpoint;
        var_conf fortest forgray;
    }
#载入变量-用户规则列表，{var_name}自定义变量名，参数conf是指定列表文件位置
http://192.168.27.74:8100/variable/{var_name}?conf=conf/test.conf
#列出列表的哈希内容，{var_name}自定义变量名
http://192.168.27.74:8100/variable/{var_name}/list
例如：
##重新载入测试访问列表(fortest),conf参数值是列表配置文件地址名称
http://192.168.27.74:8100/variable/fortest?conf=conf/test.conf
##列出测试访问列表(fortest)的哈希内容
http://192.168.27.74:8100/variable/fortest/list

配置列表内容格式如下：
#每一段的变量名同nginx中的变量一至
# - 匹配$host变量的值，即是服务器地址
[host]
www.fxscm.net.cn
fxscm.net
# - 匹配$remote_addr变量的值，即是直接客户端ip
[remote_addr]
137.0.0.1
# - 匹配消息头中变量a的值
[http_a]
aa
# - 匹配get地址中的参数a的值
[arg_a]
ab
# - post请求体里取a的值
[body_a]
aa
#"{}"内部的配置是与的关系
{
[host]
www.fxscm.net.cn
[arg_a]
ab
}
#如果设定的值是传入的值中的一部分，则在最前加入 “split_,_” 其中的 "," 是指的分隔符,如：
[split_,_proxy_add_x_forwarded_for]
127.0.0.1
意思是变量proxy_add_x_forwarded_for传入的值是以 "," 分隔的
传入的值可能是 "127.0.0.1, 192.168.1.200"，则设定的值127.0.0.1属于值范围，变量为true


#在nginx.conf文件中将需要灰度或测试的地方加入变量判断为1即可（变量名对应 $forgray 与 $fortest），如：
...
server {
        listen 8100;
        server_name 192.168.7.233 127.0.0.1;
        location / {
            endpoint;
            var_conf fortest forgray;
        }
    }
...
set $psurl http://appupstream;
if ( $fortest = 1 ){
    set $psurl http://test_appupstream;
}
if ( $forgray = 1 ){
    set $psurl http://gray_appupstream;
}
...

五.手动禁掉用户ip
#禁掉192.168.0.0/16网段所有ip
http://localhost:8100/address/deny?ip=192.168.0.0/16
#打开被禁的ip
http://localhost:8100/address/allow?ip=192.168.0.0/16
#查看被禁掉的ip
http://localhost:8100/address/deny/list

六.upstream中server分区(region)，访问路由到对应region (xfdf_ip_hash consistent模式不支持分区)
#定义分区
upstream {
...
region conf/include/region.conf;
...
}
#conf/include/region.conf文件内容如下：[#]分区号必须为数字且不能重复，0代表属于任何分区
[1]
172.17.95.133:8080
172.17.95.134:8080
[2]
172.17.98.219:8080
...
#定义访问路由规则
location /cldpoint/ {
...
router [name] conf/include/router.conf;
...
}
#[name]是router起的唯一名,必填
#conf/include/router.conf文件内容如下：
[#]是nginx变量用于取关键字(多个变量用"|"分隔), 下面的取值第一列为[#]变量中得到的值，第二列为所属分区，0代表可以进入任何分区
[http_host|http_fxdn|arg_fxdn]
www.fxscm.net   0
zzjdl.fxscm.net 0
fzy.sm7.fxscm.net   1

#重置upstream分区
http://localhost:8100/region/[upstream]?conf=conf/include/region.cnf
#重置访问路由规则
http://localhost:8100/router/[name]?conf=conf/include/router.cnf
#给指定路由规则添加项目,并会同步到相应的配置文件中
http://localhost:8100/router/[name]/add/[key]/[value]
#给指定路由规则更换路由规则变量
http://localhost:8100/router/[name]/add/[variable]
#得到指定路由规则，键对应的分区
http://localhost:8100/router/[name]/get/[key]

